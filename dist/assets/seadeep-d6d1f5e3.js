var M=Object.defineProperty;var W=(u,i,t)=>i in u?M(u,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):u[i]=t;var w=(u,i,t)=>(W(u,typeof i!="symbol"?i+"":i,t),t);import{d as K}from"./pinia-71cafef5.js";import{j as k,i as $,f as n,e as b,h as S}from"./index-d07dfee2.js";import{a as z}from"./axios-439bb627.js";import{P as I,B as Z}from"./quasar-ff3737c6.js";import{_ as B}from"./lodash-3dc9162a.js";import{b as L}from"./@vue-19632928.js";class H{constructor({securityWorker:i,secure:t,format:e,...d}={}){w(this,"instance");w(this,"securityData",null);w(this,"securityWorker");w(this,"secure");w(this,"format");w(this,"setSecurityData",i=>{this.securityData=i});w(this,"request",async({secure:i,path:t,type:e,query:d,format:T,body:h,...v})=>{const P=(typeof i=="boolean"?i:this.secure)&&this.securityWorker&&await this.securityWorker(this.securityData)||{},E=this.mergeRequestParams(v,P),A=T||this.format||void 0;return e==="multipart/form-data"&&h&&h!==null&&typeof h=="object"&&(h=this.createFormData(h)),e==="text/plain"&&h&&h!==null&&typeof h!="string"&&(h=JSON.stringify(h)),this.instance.request({...E,headers:{...E.headers||{},...e&&e!=="multipart/form-data"?{"Content-Type":e}:{}},params:d,responseType:A,data:h,url:t})});this.instance=z.create({...d,baseURL:d.baseURL||""}),this.secure=t,this.format=e,this.securityWorker=i}mergeRequestParams(i,t){const e=i.method||t&&t.method;return{...this.instance.defaults,...i,...t||{},headers:{...e&&this.instance.defaults.headers[e.toLowerCase()]||{},...i.headers||{},...t&&t.headers||{}}}}stringifyFormItem(i){return typeof i=="object"&&i!==null?JSON.stringify(i):`${i}`}createFormData(i){return Object.keys(i||{}).reduce((t,e)=>{const d=i[e],T=d instanceof Array?d:[d];for(const h of T){const v=h instanceof Blob||h instanceof File;t.append(e,v?h:this.stringifyFormItem(h))}return t},new FormData)}}class Q extends H{constructor(){super(...arguments);w(this,"api",{datasetList:(t,e={})=>this.request({path:"/api/dataset",method:"GET",query:t,format:"json",...e}),datasetUpdate:(t,e={})=>this.request({path:"/api/dataset",method:"PUT",body:t,type:"multipart/form-data",format:"json",...e}),datasetCreate:(t,e={})=>this.request({path:"/api/dataset",method:"POST",body:t,type:"multipart/form-data",format:"json",...e}),datasetDelete:(t,e={})=>this.request({path:"/api/dataset",method:"DELETE",body:t,type:"application/json",format:"json",...e}),datasetFileDetail:(t,e,d,T={})=>this.request({path:`/api/dataset/file/${t}/${e}`,method:"GET",query:d,...T}),datasetListList:(t,e={})=>this.request({path:"/api/dataset/list",method:"GET",query:t,format:"json",...e}),datasetZipDetail:(t,e={})=>this.request({path:`/api/dataset/${t}.zip`,method:"GET",...e}),inferList:(t,e={})=>this.request({path:"/api/infer",method:"GET",query:t,format:"json",...e}),inferCreate:(t,e={})=>this.request({path:"/api/infer",method:"POST",body:t,type:"application/json",format:"json",...e}),inferDelete:(t,e={})=>this.request({path:"/api/infer",method:"DELETE",body:t,type:"application/json",format:"json",...e}),inferCancelUpdate:(t,e={})=>this.request({path:"/api/infer/cancel",method:"PUT",body:t,type:"application/json",format:"json",...e}),inferExportZipDetail:(t,e={})=>this.request({path:`/api/infer/export/${t}.zip`,method:"GET",...e}),inferListList:(t,e={})=>this.request({path:"/api/infer/list",method:"GET",query:t,format:"json",...e}),inferLogList:(t,e={})=>this.request({path:"/api/infer/log",method:"GET",query:t,...e}),inferLogCreate:(t,e={})=>this.request({path:"/api/infer/log",method:"POST",body:t,type:"application/json",format:"json",...e}),inferNameUpdate:(t,e={})=>this.request({path:"/api/infer/name",method:"PUT",body:t,type:"application/json",format:"json",...e}),inferRetryUpdate:(t,e={})=>this.request({path:"/api/infer/retry",method:"PUT",body:t,type:"application/json",format:"json",...e}),inferStoreFileDetail:(t,e,d={})=>this.request({path:`/api/infer/store/file/${t}/${e}`,method:"GET",...d}),inferStoreZipDetail:(t,e={})=>this.request({path:`/api/infer/store/${t}.zip`,method:"GET",...e}),projectList:(t,e={})=>this.request({path:"/api/project",method:"GET",query:t,format:"json",...e}),projectCreate:(t,e={})=>this.request({path:"/api/project",method:"POST",body:t,type:"application/json",format:"json",...e}),projectDelete:(t,e={})=>this.request({path:"/api/project",method:"DELETE",body:t,type:"application/json",format:"json",...e}),projectInspireCreate:(t={})=>this.request({path:"/api/project/inspire",method:"POST",format:"json",...t}),projectListList:(t,e={})=>this.request({path:"/api/project/list",method:"GET",query:t,format:"json",...e}),projectNameUpdate:(t,e={})=>this.request({path:"/api/project/name",method:"PUT",body:t,type:"application/json",format:"json",...e}),projectTokenCreate:(t,e={})=>this.request({path:"/api/project/token",method:"POST",body:t,type:"application/json",format:"json",...e}),projectTokenDelete:(t,e={})=>this.request({path:"/api/project/token",method:"DELETE",body:t,type:"application/json",format:"json",...e}),projectTokenListList:(t={})=>this.request({path:"/api/project/token/list",method:"GET",format:"json",...t}),trainList:(t,e={})=>this.request({path:"/api/train",method:"GET",query:t,format:"json",...e}),trainCreate:(t,e={})=>this.request({path:"/api/train",method:"POST",body:t,type:"application/json",format:"json",...e}),trainDelete:(t,e={})=>this.request({path:"/api/train",method:"DELETE",body:t,type:"application/json",format:"json",...e}),trainCancelUpdate:(t,e={})=>this.request({path:"/api/train/cancel",method:"PUT",body:t,type:"application/json",format:"json",...e}),trainExportZipDetail:(t,e={})=>this.request({path:`/api/train/export/${t}.zip`,method:"GET",...e}),trainListList:(t,e={})=>this.request({path:"/api/train/list",method:"GET",query:t,format:"json",...e}),trainLogList:(t,e={})=>this.request({path:"/api/train/log",method:"GET",query:t,...e}),trainLogCreate:(t,e={})=>this.request({path:"/api/train/log",method:"POST",body:t,type:"application/json",format:"json",...e}),trainNameUpdate:(t,e={})=>this.request({path:"/api/train/name",method:"PUT",body:t,type:"application/json",format:"json",...e}),trainRetryUpdate:(t,e={})=>this.request({path:"/api/train/retry",method:"PUT",body:t,type:"application/json",format:"json",...e}),trainStoreFileDetail:(t,e,d={})=>this.request({path:`/api/train/store/file/${t}/${e}`,method:"GET",...d}),trainStoreZipDetail:(t,e={})=>this.request({path:`/api/train/store/${t}.zip`,method:"GET",...e}),trainWeightsList:(t,e={})=>this.request({path:"/api/train/weights",method:"GET",query:t,format:"json",...e})})}}const D=new Q,V="seadeep";k(D.instance,V);const X="/assets/anomaly_detection-70f8edf1.png",Y="/assets/object_detection-12fe61fc.png",tt="/assets/classification-e2d37b78.png",et="/assets/segmentation-9e36d003.png",at="/assets/LLM-8458e279.png",rt="/assets/RAG-7f5b4dd1.png",st="/assets/other_detection-230dea16.png",ot={OD:{name:"OD",label:$.global.t("Kernel.OD"),logo:Y},AD:{name:"AD",label:$.global.t("Kernel.AD"),logo:X},CL:{name:"CL",label:$.global.t("Kernel.CL"),logo:tt},SEG:{name:"SEG",label:$.global.t("Kernel.SEG"),logo:et},LLM:{name:"LLM",label:$.global.t("Kernel.LLM"),logo:at},RAG:{name:"RAG",label:$.global.t("Kernel.RAG"),logo:rt},other:{name:"Other",label:$.global.t("Kernel.Other"),logo:st}},{other:mt,...nt}=ot;({...nt});const x=K("project",()=>{const u=L(),i=L([]),t=L([]),e=L([]),d=[{label:$.global.t("Kernel.OD"),value:"OD"},{label:$.global.t("Kernel.CL"),value:"CL"},{label:$.global.t("Kernel.AD"),value:"AD"},{label:$.global.t("Kernel.SEG"),value:"SEG"},{label:$.global.t("Kernel.LLM"),value:"LLM"},{label:$.global.t("Kernel.RAG"),value:"RAG"},{label:$.global.t("Kernel.Other"),value:"Other"}],T=["OD","CL","AD","SEG","LLM","RAG","PLAD","PLAD-RL"],h=L(B(d)),v=L(B(d)),P=async a=>{try{const r=await D.api.projectList({id:a});if(!r||r.status!==200){r&&n(`API:/api/project ${r.statusText}`);return}const o=r.data;if(o.code!=0){n(`${o.msg} (${o.code})`);return}const s=o.ret;return s!=null&&s.not_found?void 0:(console.log(s,"getProjectByID"),(s==null?void 0:s.result)||s)}catch(r){n(`${r}`)}},E=async()=>{const a=localStorage.getItem("project_id")??"";if(a==="")return;console.log("上次開啟專案: ",a);const r=await P(a);r&&(u.value=r)},A=async(a,r="",o=!1)=>{try{const s=await D.api.projectListList({name:r,fuzzy:o,tenant_id:a});if(!s||s.status!==200){s&&n(`API:/api/project/list ${s.statusText}`);return}const l=s.data;if(l.code!=0){n(`${l.msg} (${l.code})`);return}t.value=l.ret}catch(s){n(`${s}`)}},O=async(a,r)=>{try{const o=await D.api.projectCreate({name:a,tenant_id:r});if(!o||o.status!==200){o&&n(`API:/api/project ${o.statusText}`);return}const s=o.data;if(s.code!=0){n(`${s.msg} (${s.code})`);return}const l=s.ret;u.value=l,localStorage.setItem("project_id",l.id)}catch(o){n(`${o}`)}},G=async(a,r)=>{try{const o=await D.api.projectNameUpdate({id:a,name:r});if(!o||o.status!==200){o&&n(`API:/api/project/name ${o.statusText}`);return}const s=o.data;if(s.code!=0){n(`${s.msg} (${s.code})`);return}}catch(o){n(`${o}`)}},q=async()=>{try{const a=await D.api.projectInspireCreate();if(!a||a.status!==200)return a&&n(`API:/api/project/inspire ${a.statusText}`),"";const r=a.data;return r.code!=0?(n(`${r.msg} (${r.code})`),""):r.ret}catch(a){return n(`${a}`),""}},U=()=>{u.value=void 0,localStorage.removeItem("project_id")},_=async a=>{const r=await P(a.id);if(console.log("setCurrentProject",r),!r){await A();return}u.value=r,localStorage.setItem("project_id",r.id)},R=async a=>{try{const r=await D.api.projectDelete({id:a.id});if(!r||r.status!==200){r&&n(`API:/api/project ${r.statusText}`);return}const o=r.data;if(o.code!=0){n(`${o.msg} (${o.code})`);return}}catch(r){n(`${r}`)}},C=(a,r=!1)=>a.startsWith("$LEDA")&&r?$.global.t("Kernel."+a.replace("$LEDA~~","")):a.startsWith("$LEDA")?a.replace("$LEDA~~",""):a,F=async()=>{try{const a=await b("form","/api/kernel/list",{},"GET");if(!a)return;const{code:r,msg:o,ret:s}=await a.data;if(r===0){e.value=s==null?void 0:s.kernel;let l=[];return s==null||s.kernel.forEach(y=>{l.push({label:C(y==null?void 0:y.display,!0),value:C(y==null?void 0:y.name),kernel:y.name,worker_count:y.worker_count,working_count:y.working_count})}),l.push({label:$.global.t("Kernel.Other"),value:"Other"}),l=l.sort((y,N)=>y.label.localeCompare(N.label)),v.value=l,s!=null&&s.is_all?void 0:(h.value=l,s)}else o&&n(o)}catch(a){n(`${a}`)}finally{I.hide()}},f=async a=>{I.show();try{const r=await b("form","/api/kernel/unlink",{name:a},"PUT");if(!r)return;const{code:o,msg:s,ret:l}=await r.data;if(o===0)return l;s&&n(s)}catch(r){n(`${r}`)}finally{I.hide()}},c=(a,r="kernel_mode")=>{var y;if(!a)return"";console.log(a,"task");const o=(y=a.kernel)==null?void 0:y.startsWith("$LEDA"),s=a.param?Z.object(a.param)?a.param:JSON.parse(a.param):{};console.log(s,"param");const l=s[r];return console.log("task?.param 1111",a==null?void 0:a.param),o?a!=null&&a.param?l:"":a!=null&&a.param&&p(a==null?void 0:a.param)||s[r]==="LLM"?s[r]:""},p=a=>{if(!a)return!1;let r;try{r=JSON.parse(a)}catch{return!1}const o=r.kernel;return T.includes(o)},m=a=>{if(!a)return!1;const r=JSON.parse(a).kernel;return!e.value.find(o=>o.name===r)},j=a=>{var r;return(r=e.value.find(o=>o.name===a))==null?void 0:r.active};return{currentProject:u,recentProjects:i,projectList:t,getProjectByID:P,loadLastProject:E,getProjectList:A,createProject:O,updateProjectName:G,inspireProjectName:q,resetProject:U,setCurrentProject:_,deleteProject:R,fetchKernels:F,unLinkKernel:f,isOuterKernel:m,isLedaProject:p,isKernelsActive:j,isKernelUnActive:({params:a,kernel:r})=>m(a)&&!j(r),kernels:e,allKernel:h,kernelInfoTaskTrain:v,ledaKernel:T,getKernel:c}}),J=u=>u.webkitRelativePath.split("/").slice(0,-1).slice(-1)[0],ht=K("dataset",()=>{const u=L([]),i=L(),t=L(1),e=L(10),d=L(""),T=L([]),h=L("train"),v=f=>f.map(c=>{if(c.param)try{const p=JSON.parse(c.param);(!p.type||p.type!=="inference"&&p.type!=="train")&&(p.type="other"),c.param=JSON.stringify(p)}catch{c.param=JSON.stringify({type:"other"})}else c.param=JSON.stringify({type:"other"});return c}),P=async(f="",c=!1)=>{var p;try{const m=await D.api.datasetListList({name:f,fuzzy:c,project:(p=x().currentProject)==null?void 0:p.id});if(!m||m.status!==200){m&&n(`API:/api/dataset/list ${m.statusText}`);return}const j=m.data;if(j.code!=0){n(`${j.msg} (${j.code})`);return}u.value=v(j.ret),console.log("datasetList.value",u.value)}catch(m){n(`${m}`)}},E=async(f,c,p=void 0,m="",j="")=>{var g;try{const a=new FormData;for(const l of c){const y=await(l.raw??l).arrayBuffer();a.append("file",new Blob([y]),j===""?l.name:`${j}..${l.name}`)}a.append("project_id",(g=x().currentProject)==null?void 0:g.id),a.append("name",f),a.append("from_id",m),p!==void 0&&a.append("param",p);const r=await b("form",`/api/${S()?"":"seadeep/"}dataset`,a,"POST");if(!r||r.status!==200){r&&n(`API:/api/dataset ${r.statusText}`);return}const o=await r.data;if(o.code!=0){n(`${o.msg} (${o.code})`);return}const s=o.ret;return i.value=s,s}catch(a){n(`${a}`);return}},A=async(f,c,p=void 0,m="")=>{var j;try{const g=new FormData;for(const s of c){const l=await s.arrayBuffer();g.append("file",new Blob([l]),(J(s)+"/"+s.name).replaceAll("/",".."))}g.append("project_id",(j=x().currentProject)==null?void 0:j.id),g.append("name",f),g.append("from_id",m),p!==void 0&&g.append("param",p);const a=await b("form",`/api/${S()?"":"seadeep/"}dataset`,g,"POST");if(!a||a.status!==200){a&&n(`API:/api/dataset ${a.statusText}`);return}const r=await a.data;if(r.code!=0){n(`${r.msg} (${r.code})`);return}const o=r.ret;return i.value=o,o}catch(g){n(`${g}`);return}},O=async(f,c={files:[],removes:[],param:void 0,name:"",label:void 0})=>{const{files:p,removes:m,param:j,name:g,label:a}=c;try{const r=new FormData;r.append("id",f);for(const l of p??[]){const y=await(l.raw??l).arrayBuffer();r.append("file",new Blob([y]),a?l.name.replaceAll(`${a}/`,`${a}..`):l.name)}for(const l of m??[])r.append("remove",l);j!==void 0&&r.append("param",j),g&&r.append("name",g);const o=await b("form",`/api/${S()?"":"seadeep/"}dataset`,r,"PUT");if(!o||o.status!==200){o&&n(`API:/api/dataset ${o.statusText}`);return}if(!o||o.status!==200){o&&n(`API:/api/dataset ${o.statusText}`);return}const s=await o.data;if(s.code!=0){n(`${s.msg} (${s.code})`);return}}catch(r){n(`${r}`)}},G=async(f,c={files:[],removes:[],param:void 0,name:""})=>{const{files:p,removes:m,param:j,name:g}=c;try{const a=new FormData;a.append("id",f);for(const s of p??[]){const l=await s.arrayBuffer();a.append("file",new Blob([l]),(J(s)+"/"+s.name).replaceAll("/",".."))}for(const s of m??[])a.append("remove",s);j!==void 0&&a.append("param",j),g&&a.append("name",g);const r=await b("form",`/api/${S()?"":"seadeep/"}dataset`,a,"PUT");if(!r||r.status!==200){r&&n(`API:/api/dataset ${r.statusText}`);return}if(!r||r.status!==200){r&&n(`API:/api/dataset ${r.statusText}`);return}const o=await r.data;if(o.code!=0){n(`${o.msg} (${o.code})`);return}}catch(a){n(`${a}`)}},q=async f=>{try{const c=await D.api.datasetList({id:f});if(!c||c.status!==200){c&&n(`API:/api/dataset ${c.statusText}`);return}const p=c.data;if(p.code!=0){n(`${p.msg} (${p.code})`);return}return p.ret}catch(c){n(`${c}`)}};return{currentDataset:i,datasetList:u,page:t,pageNum:e,nameFilter:d,kernelFilter:T,getDatasetList:P,getDatasetByID:q,createDataset:E,createDatasetCL:A,uploadDataset:O,uploadDatasetCL:G,resetDataset:()=>{i.value=void 0},deleteDataset:async f=>{try{const c=await D.api.datasetDelete({id:f});if(!c||c.status!==200)return c&&n(`API:/api/dataset/delete ${c.statusText}`),!1;const p=c.data;return p.code!=0?(n(`${p.msg} (${p.code})`),!1):!0}catch(c){n(`${c}`)}},setCurrentDataset:async f=>{const c=await q(f.id);if(!c){await P(),i.value=void 0;return}i.value=c},downloadURL:f=>`/api/dataset/${f}.zip`,currentTab:h,postLabelRename:async f=>{var c;try{const p=await b("json","/api/dataset/label-rename",{label_names:f,dataset_id:(c=i==null?void 0:i.value)==null?void 0:c.id},"POST");if(!p||p.status!==200)return p&&n(`API:/api/dataset/label-rename ${p.statusText}`),!1;const m=p.data;return m.code!=0?(n(`${m.msg} (${m.code})`),!1):!0}catch(p){return n(`${p}`),!1}finally{await P()}}}}),jt=K("seadeep",()=>{const u=L("");return{host_url:u,save:async e=>{try{const d=await fetch("/api/seadeep-setting",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});u.value=await d.text()}catch(d){n(`save seadeep host failed: ${d}`)}},load:async()=>{try{const e=await fetch("/api/seadeep-setting",{method:"GET"});u.value=await e.text()}catch(e){n(`load seadeep hsot failed: ${e}`)}}}});export{x as a,ht as b,jt as u};
